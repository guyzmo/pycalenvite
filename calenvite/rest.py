#!/usr/bin/env python3

"""
Pycalenvite application

Usage:
    calenvite [-v] --config=<config>

Parameters:
    -c,--config=<config>   Setup config file.
    -v,--verbose           Set verbose output.
    -h,--help              This message.
    -V,--version           Show version.

"""

from flask import Flask, request, render_template, make_response, send_from_directory
from flask_restful import Resource, Api
from flask_webpack import Webpack
from flask.ext.cors import CORS, cross_origin

from isodate import parse_duration, duration_isoformat
from isodate.isoerror import ISO8601Error

import calenvite


def Template(app, path):
    loader = jinja2.ChoiceLoader([
        app.jinja_loader,
        jinja2.FileSystemLoader(path),
    ])
    app.jinja_loader = loader


def WebpackWatcher(app, webpack_config='./webpack.config.js'):
    if 'WERKZEUG_RUN_MAIN' not in os.environ:
        p = Popen(['node_modules/.bin/webpack',
            '--config', webpack_config,
            '--progress',
            '--profile',
            '--colors',
            '--content-base', 'src/static',
            '--inline',
            '--watch' ]
            )

    st = time.time()
    while time.time() - st < 20: # 20s timeout
        if os.path.exists(app.config["WEBPACK_MANIFEST_PATH"]):
            break
        time.sleep(1)
    else:
        p.terminate()
        print('Fatal error: Timeout waiting for {} to be generated by webpack!'.format(app.config["WEBPACK_MANIFEST_PATH"]))
        sys.exit(-1)

    return app


def build_api(calenvite, args=None):
    root = os.path.join(os.path.abspath(os.path.dirname(__file__)), '..')
    static_folder = os.path.join(root, 'static')

    app = Flask('pycalenvite', static_folder=static_folder)

    # Enable webpack asset tracking and availability

    # wp = Webpack()
    # app.config["REQUIREJS_BIN"] = os.path.join(root,
    #                                            '..',
    #                                            'node_modules',
    #                                            'requirejs',
    #                                            'bin',
    #                                            'r.js')
    # app.config["REQUIREJS_CONFIG"] = os.path.join(root, 'build.js')
    # app.config["REQUIREJS_RUN_IN_DEBUG"] = False

    # app.config["WEBPACK_MANIFEST_PATH"] = os.path.join(root, 'manifest.json')

    extra_files=[]

    # if args['--verbose']:
    #     extra_files += [app.config["WEBPACK_MANIFEST_PATH"]]

    # Webpack(app)
    # WebpackWatcher(app, os.path.join(root, 'webpack.config.js'))

    # Enable CORS for the app
    CORS(app, origins='*')

    api = Api(app)

    def parse_get_args(func):
        def func_wrapper(*args, **kwarg):
            kwarg['page'] = int(request.args.get('page', 0))
            kwarg['per_page'] = int(request.args.get('per_page', -1))
            kwarg['ordering'] = request.args.get('ordering', 'iid')
            kwarg['search'] = request.args.get('search', None)
            kwarg['format'] = request.args.get('format', None)
            return func(*args, **kwarg)
        return update_wrapper(func_wrapper, func)


    class Invitation(Resource):

        def get(self, uuid):
            '''Handles invitations

            ``GET /invitation/<uuid>``

            Returns:

                gets the subject/length details of the given invitation.
            '''
            invite = calenvite.show_invite(uuid):
            if invite is None:
                raise Exception('Unknown invitation id.')
            return dict(subject=invite.subject,
                    length=invite.length,
                    uuid=invite.uuid)

        def create_invite(self):
            '''
            ``POST /invitation``

            creates a new invitation

            Args:

                subject: the title of the invitation
                length: the duration of the meeting to plan

            Returns:

                uuid of the event
            '''
            try:
                subject = request.args['subject']
                length = parse_duration(request.args['length']
            except KeyError as err:
                raise Exception('Missing {} parameter for the method.') from err
            except ISO8601Error as err:
                raise Exception('Wrong date format. It shall be ISO8601 compliant.')

            return calenvite.create_invite(subject, length)

        def accept_invite(self, uuid):
            '''
            ``POST /invitation/<uuid>``

            accepts an invitation

            Args:

                date: chosen date of the invitation

            Returns:

                event details (200)
            '''
            try:
                date = parse_datetime(request.args['date'])
                return calenvite.confirm_invite(uuid, date)
            except KeyError as err:
                raise Exception('Missing {} parameter for the method.') from err
            except ISO8601Error as err:
                raise Exception('Wrong date format. It shall be ISO8601 compliant.')
            except Exception as err:
                # TODO handle correctly missing UUID (custom exception)
                raise err from err

        def post(self, uuid):
            if uuid is None:
                return self.create_invite()
            else:
                return self.accept_invite(uuid)


    class InvitationList(Resource):
        @parse_get_args
        def get(self, page, per_page, ordering, search, format):
            '''Returns the list of all the invitations

            ``GET /invitation/list``

            '''
            # TODO return the timeline with parameters data
            return calenvite.meetings.timeline


    class CalendarMeetings(Resource):
        @parse_get_args
        def get(self, page, per_page, ordering, search, format):
            '''Returns all the meetings taken on the timeline.
            '''
            # TODO return the timeline with parameters data
            return calenvite.meetings.timeline


    class CalendarSoup(Resource):
        @parse_get_args
        def get(self, page, per_page, ordering, search, format):
            '''Returns all the busy events merged
            '''
            # TODO return the timeline with parameters data
            return calenvite.calendar.timeline


    class CalendarSlots(Resource):
        def get(self):
            '''Handles calendar slots

                * ``GET /calendar/slots``

            returns the busy slots of the planning.

            Args:
                * date: ISO8601 encoded date for the start date of the period to query
                * delta: ISO8601 encoded duration for the period to query.

            Returns:

                a list of tuples marking begining and end timestamps for each busy slot.
            '''
            try:
                date = request.args['date']
                delta = request.args['delta']
            except KeyError as err:
                raise Exception('Missing {} parameter for the method.') from err
            except ISO8601Error as err:
                raise Exception('Wrong date format. It shall be ISO8601 compliant.')
            return calendar.get_busy_slots(date, delta)

    class CalendarSubscription(Resource):
        def get(self, index):
            '''
                * ``GET /calendar/subscription/<index>

            returns the URL of the calendar at index.

            '''
            return calenvite.subscriptions[index]

        def post(self, index):
            '''Handles calendar subscriptions:

                * ``POST /calendar/subscription``

            with parameter ``url``: adds a new subscription to an ICS
            '''
            if index:
                raise Exception() # TODO if no index makes no sense
            try:
                url = request.args['url']
            except KeyError as err:
                raise Exception('Missing {} parameter for the method.') from err
            calenvite.subscribe(url)

        def delete(self, index):
            '''
                * ``DELETE /calendar/subscription/<index>``

            removes the calendar at index.
            '''
            raise NotImplementedError

    class CalendarSubscriptionList(Resource):
        '''Handles calendar listing

            * ``GET /calendar/subscription/list``

        returns the ordered list of calendar subscriptions.
        '''
        def get(self):
            return calenvite.subscriptions

    api.add_resource(Invitation,
            '/invitation',
            '/invitation/<string:uuid>')
    api.add_resource(Invitation,
            '/invitation/list')
    api.add_resource(CalendarMeetings,
            '/calendar/',
            '/calendar/meetings')
    api.add_resource(CalendarSoup,
            '/calendar/soup')
    api.add_resource(CalendarSlots,
            '/calendar/slots')
    api.add_resource(CalendarSubscription,
            '/calendar/subscription'
            '/calendar/subscription/<int:index>')

    @app.route('/')
    def basic_pages(**kwargs):
        return render_template('index.html')

    @app.route("/assets/<path:filename>")
    def send_asset(filename):
        return send_from_directory(os.path.join(root, 'static'), filename)

    app.run(debug=args['--verbose'],
            extra_files=extra_files)


def main():
    args = docopt.docopt(__doc__)
    build_api(Calenvite(), args)

if __name__ == '__main__':
    main()
